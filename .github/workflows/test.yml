name: Test of automatic file upload to a debian repo

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build_deb:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v4
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}          
      
      - name: GPG user IDs
        run: |
          echo "fingerprint: ${{ steps.import_gpg.outputs.fingerprint }}"
          echo "keyid:       ${{ steps.import_gpg.outputs.keyid }}"
          echo "name:        ${{ steps.import_gpg.outputs.name }}"
          echo "email:       ${{ steps.import_gpg.outputs.email }}"

      - name: Generate deb packages
        run: ./generate_deb_packages.sh

      - name: Archive deb package as artifacts
        uses: actions/upload-artifact@v2
        with:
          name: deb
          path: '*.deb'

  # test_deb:
  #   runs-on: ubuntu-latest
  #   needs: [build_deb]
  #   strategy:
  #     matrix:
  #       docker-tag: ['debian:8', 'debian:9', 'debian:10', 'debian:11', 'debian:stable', 'ubuntu:14.04', 'ubuntu:16.04', 'ubuntu:18.04', 'ubuntu:20.04', 'ubuntu:21.04']
  #   steps:
  #     - uses: actions/download-artifact@v2
  #       with:
  #         name: deb
  #         path: ./

  #     - name: Inspect artifacts
  #       run: |
  #         dpkg-deb --contents pymchelper.deb
  #         dpkg-deb --contents pymchelper-convertmc.deb
  #         dpkg-deb --contents pymchelper-runmc.deb

  #     - name: Test installation
  #       run: |
  #         docker run --volume `pwd`:/pkg ${{ matrix.docker-tag }} /bin/sh -c "ldd --version; dpkg --install /pkg/pymchelper-*.deb; convertmc --version; runmc --version"

  # test_old_deb:
  #   runs-on: ubuntu-latest
  #   needs: [build_deb]
  #   strategy:
  #     matrix:
  #       docker-tag: ['debian:7', 'debian:8', 'debian:9', 'debian:10', 'debian:11', 'debian:stable', 'ubuntu:12.04', 'ubuntu:14.04', 'ubuntu:16.04', 'ubuntu:18.04', 'ubuntu:20.04', 'ubuntu:21.04']
  #   steps:
  #     - uses: actions/download-artifact@v2
  #       with:
  #         name: deb
  #         path: ./

  #     - name: Inspect artifacts
  #       run: |
  #         ls -alh .
  #         dpkg-deb --contents pymchelper.deb

  #     - name: Test installation
  #       run: |
  #         docker run -v `pwd`:/pkg ${{ matrix.docker-tag }} /bin/sh -c "ldd --version; dpkg -i /pkg/pymchelper_old.deb; pld2sobp --version"

  repo_prepare:
      runs-on: ubuntu-latest
      needs: [build_deb]
      steps:
      - uses: actions/checkout@v2

      - uses: actions/download-artifact@v2
        with:
          name: deb
          path: ./
    
      # - name: Generate dummy GPG key
      #   run: ./generate_dummy_gpg_key.sh



      - name: Get aptly tool, create reposity and add packages
        run: ./add_packages_to_repo.sh

      - name: Archive directory with repository as artifact
        uses: actions/upload-artifact@v2
        with:
          name: repo
          path: 'public'

  # repo_upload:
  #     runs-on: ubuntu-latest
  #     needs: [repo_prepare, test_deb]
  #     steps:
  #     - uses: actions/checkout@v2

  #     - uses: actions/download-artifact@v2
  #       with:
  #         name: repo
  #         path: public

  #     - name: Tuning
  #       run: |
  #         mv datamedsci.list public/
  #         touch public/.nojekyll

  #     - name: Deploy to GitHub Pages
  #       uses: JamesIves/github-pages-deploy-action@4.1.7
  #       with:
  #         branch: gh-pages # The branch the action should deploy to.
  #         folder: public # The folder the action should deploy.