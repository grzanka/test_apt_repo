name: Test of automatic file upload to a debian repo

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build_deb:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Generate deb packages
        run: ./generate_deb_packages.sh

      - name: Archive deb package as artifacts
        uses: actions/upload-artifact@v2
        with:
          name: deb
          path: '*.deb'

  # test_deb:
  #   runs-on: ubuntu-latest
  #   needs: [build_deb]
  #   strategy:
  #     matrix:
  #       docker-tag: ['debian:8', 'debian:9', 'debian:10', 'debian:11', 'debian:stable', 'ubuntu:14.04', 'ubuntu:16.04', 'ubuntu:18.04', 'ubuntu:20.04', 'ubuntu:21.04']
  #   steps:
  #     - uses: actions/download-artifact@v2
  #       with:
  #         name: deb
  #         path: ./

  #     - name: Inspect artifacts
  #       run: |
  #         ls -alh .
  #         dpkg-deb --contents pymchelper.deb
  #         dpkg-deb --contents pymchelper_old.deb

  #     - name: Test installation
  #       run: |
  #         docker run -v `pwd`:/pkg ${{ matrix.docker-tag }} /bin/sh -c "ldd --version; dpkg -i /pkg/pymchelper.deb; pld2sobp --version"

  # test_old_deb:
  #   runs-on: ubuntu-latest
  #   needs: [build_deb]
  #   strategy:
  #     matrix:
  #       docker-tag: ['debian:7', 'debian:8', 'debian:9', 'debian:10', 'debian:11', 'debian:stable', 'ubuntu:12.04', 'ubuntu:14.04', 'ubuntu:16.04', 'ubuntu:18.04', 'ubuntu:20.04', 'ubuntu:21.04']
  #   steps:
  #     - uses: actions/download-artifact@v2
  #       with:
  #         name: deb
  #         path: ./

  #     - name: Inspect artifacts
  #       run: |
  #         ls -alh .
  #         dpkg-deb --contents pymchelper.deb

  #     - name: Test installation
  #       run: |
  #         docker run -v `pwd`:/pkg ${{ matrix.docker-tag }} /bin/sh -c "ldd --version; dpkg -i /pkg/pymchelper_old.deb; pld2sobp --version"

  repo_prepare:
      runs-on: ubuntu-latest
      needs: [build_deb]
      steps:

      - uses: actions/download-artifact@v2
        with:
          name: deb
          path: ./
    
      - name: Generate dummy GPG key
        run: ./generate_dummy_gpg_key.sh

      - name: Get aptly tool, create reposity and add packages
        run: |


      - name: Archive directory with repository as artifact
        uses: actions/upload-artifact@v2
        with:
          name: repo
          path: 'public'

  repo_upload:
      runs-on: ubuntu-latest
      needs: [repo_prepare]
      steps:
      - uses: actions/checkout@v2

      - uses: actions/download-artifact@v2
        with:
          name: repo
          path: public

      - name: Tuning
        run: |
          mv datamedsci.list public/
          touch public/.nojekyll

      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@4.1.7
        with:
          branch: gh-pages # The branch the action should deploy to.
          folder: public # The folder the action should deploy.