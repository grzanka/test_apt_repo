name: Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]


jobs:
  build_deb:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - run: |
          ls -alh .
          ./generate_deb.sh
          ls -alh

      - name: Archive debian package as artifacts
        uses: actions/upload-artifact@v2
        with:
          name: deb
          path: '*.deb'

  # test_deb:
  #   runs-on: ubuntu-latest
  #   needs: [build_deb]
  #   strategy:
  #     matrix:
  #       docker-tag: ['debian:8', 'debian:9', 'debian:10', 'debian:11', 'debian:stable', 'ubuntu:14.04', 'ubuntu:16.04', 'ubuntu:18.04', 'ubuntu:20.04', 'ubuntu:21.04']
  #   steps:
  #     - uses: actions/download-artifact@v2
  #       with:
  #         name: deb
  #         path: ./

  #     - name: Inspect artifacts
  #       run: |
  #         ls -alh .
  #         dpkg-deb --contents pymchelper.deb
  #         dpkg-deb --contents pymchelper_old.deb

  #     - name: Test installation
  #       run: |
  #         docker run -v `pwd`:/pkg ${{ matrix.docker-tag }} /bin/sh -c "ldd --version; dpkg -i /pkg/pymchelper.deb; pld2sobp --version"

  # test_old_deb:
  #   runs-on: ubuntu-latest
  #   needs: [build_deb]
  #   strategy:
  #     matrix:
  #       docker-tag: ['debian:7', 'debian:8', 'debian:9', 'debian:10', 'debian:11', 'debian:stable', 'ubuntu:12.04', 'ubuntu:14.04', 'ubuntu:16.04', 'ubuntu:18.04', 'ubuntu:20.04', 'ubuntu:21.04']
  #   steps:
  #     - uses: actions/download-artifact@v2
  #       with:
  #         name: deb
  #         path: ./

  #     - name: Inspect artifacts
  #       run: |
  #         ls -alh .
  #         dpkg-deb --contents pymchelper.deb

  #     - name: Test installation
  #       run: |
  #         docker run -v `pwd`:/pkg ${{ matrix.docker-tag }} /bin/sh -c "ldd --version; dpkg -i /pkg/pymchelper_old.deb; pld2sobp --version"

  repo_prepare:
      runs-on: ubuntu-latest
      needs: [build_deb]
      steps:

      - uses: actions/download-artifact@v2
        with:
          name: deb
          path: ./

      # see https://stackoverflow.com/questions/51504367/gpg-agent-forwarding-inappropriate-ioctl-for-device
      - name: Generate dummy GPG key
        run: |
          echo "configuring"
          mkdir -p ~/.gnupg
          chmod 700 ~/.gnupg
          touch ~/.gnupg/gpg.conf
          echo "use-agent" >> ~/.gnupg/gpg.conf
          echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
          touch ~/.gnupg/gpg-agent.conf
          echo "allow-loopback-pinentry" >> ~/.gnupg/gpg-agent.conf
          echo "reloading"
          echo RELOADAGENT | gpg-connect-agent
          echo "quick gen"
          gpg --batch --passphrase '' --quick-gen-key "Name_test (Testing) <email_test@xxx.com>" ed25519 cert 1y
          echo "getting id"
          fpr=$(gpg --list-options show-only-fpr-mbox --list-secret-keys | sed -r -n '$!d;s@^([^[:space:]]+).*@\1@g;p')
          touch public_key_id.txt
          echo $fpr >> public_key_id.txt
          echo "adding"
          gpg --batch --pinentry-mode=loopback --passphrase '' --quick-add-key $fpr ed25519 sign 1y
          gpg --batch --pinentry-mode=loopback --passphrase '' --quick-add-key $fpr ed25519 auth 1y
          gpg --batch --pinentry-mode=loopback --passphrase '' --quick-add-key $fpr cv25519 encrypt 1y
          gpg --export --armor > public.gpg

      - name: Inspect and run aptly
        run: |
          wget --quiet https://github.com/aptly-dev/aptly/releases/download/v1.4.0/aptly_1.4.0_linux_amd64.tar.gz
          tar -zxf aptly_1.4.0_linux_amd64.tar.gz
          ./aptly_1.4.0_linux_amd64/aptly repo create -distribution="stable" -component="main" main
          ./aptly_1.4.0_linux_amd64/aptly repo add main pymchelper.deb
          ./aptly_1.4.0_linux_amd64/aptly publish repo -batch main
          ls -alh ~/.aptly/public      
          mv ~/.aptly/public .
          mv public_key_id.txt public/
          mv public.gpg public/
          mv datamedsci.list public/

      - name: Archive repo as artifact
        uses: actions/upload-artifact@v2
        with:
          name: repo
          path: 'public'

  repo_upload:
      runs-on: ubuntu-latest
      needs: [repo_prepare]
      steps:
      - uses: actions/checkout@v2

      - uses: actions/download-artifact@v2
        with:
          name: repo
          path: public

      - name: Tuning
        run: |
          touch public/.nojekyll

      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@4.1.7
        with:
          branch: gh-pages # The branch the action should deploy to.
          folder: public # The folder the action should deploy.